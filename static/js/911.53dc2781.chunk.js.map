{"version":3,"file":"static/js/911.53dc2781.chunk.js","mappings":"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","sources":["components/Contact/Contact.styled.js","components/Contact/Contact.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nexport const Text = styled.p`\n  margin: 0;\n\n  :not(:last-child) {\n    margin-right: 5px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactItem, Text } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst Contact = ({ id, name, phone }) => {\n  const dispatch = useDispatch();\n  return (\n    <ContactItem key={id}>\n      <Text>{name}:</Text>\n      <Text>{phone}</Text>\n      <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </button>\n    </ContactItem>\n  );\n};\n\nexport default Contact;\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import Contact from '../Contact/Contact';\nimport { useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      <ul>\n        {contacts.map(({ id, name, phone }) => {\n          return <Contact key={id} id={id} name={name} phone={phone} />;\n        })}\n      </ul>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FormBlock = styled.div`\n  padding: 5px;\n  border: 1px solid;\n  width: 300px;\n  margin-bottom: 10px;\n`;\n\nexport const NameLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-weight: 500;\n`;\n\nexport const Input = styled.input`\n  width: 200px;\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NameLabel, Input, FormBlock } from './ContactForm.styled';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const name = event.target.elements.name.value;\n    const phone = event.target.elements.phone.value;\n\n    const newContact = contacts.find(contact => contact.name === name);\n    if (newContact) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, phone }));\n\n    reset();\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <FormBlock>\n          <NameLabel>\n            Name\n            <Input\n              value={name}\n              onChange={handleChange}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </NameLabel>\n\n          <NameLabel>\n            Number\n            <Input\n              value={phone}\n              onChange={handleChange}\n              type=\"tel\"\n              name=\"phone\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </NameLabel>\n          <button type=\"submit\">Add contact</button>\n        </FormBlock>\n      </form>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["ContactItem","styled","Text","id","name","phone","dispatch","useDispatch","type","onClick","deleteContact","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filter","normalizedFilter","toLowerCase","contact","includes","ContactList","useSelector","map","FormBlock","NameLabel","Input","ContactForm","useState","setName","setPhone","handleChange","event","target","value","reset","onSubmit","preventDefault","elements","find","alert","addContact","onChange","pattern","title","required","Tasks","useEffect","fetchContacts","Helmet"],"sourceRoot":""}